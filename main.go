package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strings"

	"github.com/sensu-community/sensu-plugin-sdk/sensu"
	"github.com/sensu/sensu-go/types"
)

// shawn

// Config represents the handler plugin config.
type Config struct {
	sensu.PluginConfig
	Example    string
	WebHookURL string
}

// TeamsCard represents a MS teams card
type TeamsCard struct {
	Context    string `json:"@context"`
	Type       string `json:"@type"`
	ThemeColor string `json:"themeColor"`
	Title      string `json:"title"`
	Text       string `json:"text"`
}

const (
	webHookURL = "webHookURL"
)

var (
	plugin = Config{
		PluginConfig: sensu.PluginConfig{
			Name:     "sensu-msteams-handler",
			Short:    "Send alerts to Microsoft Teams channels using webhooks",
			Keyspace: "sensu.io/plugins/sensu-msteams-handler/config",
		},
	}

	options = []*sensu.PluginConfigOption{
		&sensu.PluginConfigOption{
			Path:      "example",
			Env:       "HANDLER_EXAMPLE",
			Argument:  "example",
			Shorthand: "e",
			Default:   "",
			Usage:     "An example string configuration option",
			Value:     &plugin.Example,
		},
		{
			Path:      webHookURL,
			Env:       "WEBHOOK_URL",
			Argument:  "webHookURL",
			Shorthand: "u",
			Default:   "",
			Usage:     "The web hook URL generated by Microsoft Teams.",
			Value:     &plugin.WebHookURL,
		},
	}
)

func main() {
	handler := sensu.NewGoHandler(&plugin.PluginConfig, options, checkArgs, executeHandler)
	handler.Execute()
}

func checkArgs(_ *types.Event) error {
	log.Println("CHECKING CONFIG")
	if len(plugin.WebHookURL) == 0 {
		return fmt.Errorf("--webHookURL or WEBHOOK_URL environment variable is required")
	}
	return nil
}

func executeHandler(event *types.Event) error {
	log.Println("executing handler with --webHookURL", plugin.WebHookURL)
	data := TeamsCard{
		Context:    "https://schema.org/extensions",
		Type:       "MessageCard",
		ThemeColor: "FF0000",
		Title:      event.Name,
		Text:       event.Name,
	}
	card, _ := json.Marshal(data)
	var (
		reqBody = fmt.Sprintf("%s", card)
	)
	requestBody := strings.NewReader(reqBody)

	// post some data
	resp, err := http.Post(
		plugin.WebHookURL,
		"application/json; charset=UTF-8",
		requestBody,
	)
	if err != nil {
		log.Fatalln(err)
	}

	// close response body
	resp.Body.Close()

	return nil
}
