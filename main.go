package main

import (
	"fmt"
	"log"
	"net/http"
	"strings"

	"github.com/sensu-community/sensu-plugin-sdk/sensu"
	"github.com/sensu/sensu-go/types"
)

// shawn

// Config represents the handler plugin config.
type Config struct {
	sensu.PluginConfig
	Example    string
	WebHookURL string
}

const (
	webHookURL = "webHookURL"
)

var (
	plugin = Config{
		PluginConfig: sensu.PluginConfig{
			Name:     "sensu-msteams-handler",
			Short:    "Send alerts to Microsoft Teams channels using webhooks",
			Keyspace: "sensu.io/plugins/sensu-msteams-handler/config",
		},
	}

	options = []*sensu.PluginConfigOption{
		&sensu.PluginConfigOption{
			Path:      "example",
			Env:       "HANDLER_EXAMPLE",
			Argument:  "example",
			Shorthand: "e",
			Default:   "",
			Usage:     "An example string configuration option",
			Value:     &plugin.Example,
		},
		{
			Path:      webHookURL,
			Env:       "WEBHOOK_URL",
			Argument:  "webHookURL",
			Shorthand: "u",
			Default:   "",
			Usage:     "The web hook URL generated by Microsoft Teams.",
			Value:     &plugin.WebHookURL,
		},
	}
)

func main() {
	handler := sensu.NewGoHandler(&plugin.PluginConfig, options, checkArgs, executeHandler)
	handler.Execute()
}

func checkArgs(_ *types.Event) error {
	log.Println("CHECKING CONFIG")
	if len(plugin.WebHookURL) == 0 {
		return fmt.Errorf("--webHookURL or WEBHOOK_URL environment variable is required")
	}
	return nil
}

func executeHandler(event *types.Event) error {
	log.Println("executing handler with --webHookURL", plugin.WebHookURL)

	// requestBody := strings.NewReader ({`
	//   "@context": "https://schema.org/extensions",
	//   "@type": "MessageCard",
	//   "themeColor": "FF0000",
	//   "title": "TEST",
	//   "text": "TEST",
	//   "sections": [
	// 		{
	// 				"activityTitle": "Issue Description",
	// 				"activitySubtitle": "TEST",
	// 				"facts": [
	// 						{
	// 								"name": "Configuration Item",
	// 								"value": "TEST"
	// 						},
	// 						{
	// 								"name": "Priority",
	// 								"value": "TEST"
	// 						}
	// 				]
	// 		}
	//   ],
	//   "potentialAction": [
	//       {
	//       "@type": "OpenUri",
	//       "name": "View Incident",
	//       "targets": [
	//           { "os": "default", "uri": "https://test.com/nav_to.do?uri=incident.do?sys_id=TEST" }
	//       ]
	//       },
	//       {
	//       "@type": "OpenUri",
	//       "name": "Join Tech Bridge",
	//       "targets": [
	//           { "os": "default", "uri": "https://test.com/my/techbridge" }
	//       ]
	//       }
	//   ]
	// `})
	requestBody := strings.NewReader(`
		{
			"@context": "https://schema.org/extensions",
			"@type": "MessageCard",
			"themeColor": "FF0000",
			"title": "TEST",
			"text": "TEST",
			"sections": [
					{
							"activityTitle": "Issue Description",
							"activitySubtitle": "TEST",
							"facts": [
									{
											"name": "Configuration Item",
											"value": "TEST"
									},
									{
											"name": "Priority",
											"value": "ERRRRROR"
									}
							]
					}
			],
			"potentialAction": [
					{
					"@type": "OpenUri",
					"name": "View Alert",
					"targets": [
							{ "os": "default", "uri": "https://google.com" }
					]
					},
					{
					"@type": "OpenUri",
					"name": "Silence",
					"targets": [
							{ "os": "default", "uri": "https://google.com" }
					]
					}
			]
		}
	`)

	// post some data
	resp, err := http.Post(
		"http://dummy.restapiexample.com/api/v1/create",
		"application/json; charset=UTF-8",
		requestBody,
	)
	if err != nil {
		log.Fatalln(err)
	}

	// close response body
	resp.Body.Close()

	return nil
}
